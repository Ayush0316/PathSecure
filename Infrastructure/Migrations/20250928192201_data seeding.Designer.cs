// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20250928192201_data seeding")]
    partial class dataseeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = "4d3f2168-56f0-432a-aabb-4ca7316af375",
                            CreatedAt = new DateTime(2025, 9, 28, 19, 22, 0, 738, DateTimeKind.Utc).AddTicks(1767),
                            IsDeleted = false,
                            Name = "CreateUser",
                            UpdatedAt = new DateTime(2025, 9, 29, 0, 52, 0, 738, DateTimeKind.Local).AddTicks(1772)
                        },
                        new
                        {
                            Id = "ae9e8307-38b9-40fa-9f61-4ee258ecd8e5",
                            CreatedAt = new DateTime(2025, 9, 28, 19, 22, 0, 738, DateTimeKind.Utc).AddTicks(2176),
                            IsDeleted = false,
                            Name = "AssignRole",
                            UpdatedAt = new DateTime(2025, 9, 29, 0, 52, 0, 738, DateTimeKind.Local).AddTicks(2176)
                        },
                        new
                        {
                            Id = "c1e6e530-0d73-4ee3-869b-5facc7d86953",
                            CreatedAt = new DateTime(2025, 9, 28, 19, 22, 0, 738, DateTimeKind.Utc).AddTicks(2291),
                            IsDeleted = false,
                            Name = "UpdateUser",
                            UpdatedAt = new DateTime(2025, 9, 29, 0, 52, 0, 738, DateTimeKind.Local).AddTicks(2292)
                        },
                        new
                        {
                            Id = "ea9455a0-73e4-4d6c-8f4a-76ea306efa9f",
                            CreatedAt = new DateTime(2025, 9, 28, 19, 22, 0, 738, DateTimeKind.Utc).AddTicks(2301),
                            IsDeleted = false,
                            Name = "UpdateRole",
                            UpdatedAt = new DateTime(2025, 9, 29, 0, 52, 0, 738, DateTimeKind.Local).AddTicks(2302)
                        },
                        new
                        {
                            Id = "069f8c1f-7957-49c8-8ef0-42f2aa318343",
                            CreatedAt = new DateTime(2025, 9, 28, 19, 22, 0, 738, DateTimeKind.Utc).AddTicks(2310),
                            IsDeleted = false,
                            Name = "DeleteUser",
                            UpdatedAt = new DateTime(2025, 9, 29, 0, 52, 0, 738, DateTimeKind.Local).AddTicks(2311)
                        },
                        new
                        {
                            Id = "57d05878-10f8-4c77-a064-8c24159a1a74",
                            CreatedAt = new DateTime(2025, 9, 28, 19, 22, 0, 738, DateTimeKind.Utc).AddTicks(2319),
                            IsDeleted = false,
                            Name = "Read",
                            UpdatedAt = new DateTime(2025, 9, 29, 0, 52, 0, 738, DateTimeKind.Local).AddTicks(2320)
                        });
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ReplacedByHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Revoked")
                        .HasColumnType("bit");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Domain.Entities.Resource", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ParentResourceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResourceMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentResourceId");

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            Id = "933334fe-2277-448d-afd5-aacda49094e7",
                            CreatedAt = new DateTime(2025, 9, 28, 19, 22, 0, 738, DateTimeKind.Utc).AddTicks(4627),
                            IsDeleted = false,
                            ResourceMethod = "POST",
                            ResourceName = "/api/users/special/create",
                            ResourceType = "api",
                            UpdatedAt = new DateTime(2025, 9, 29, 0, 52, 0, 738, DateTimeKind.Local).AddTicks(4628)
                        },
                        new
                        {
                            Id = "806ae3a9-6d4b-44e2-beb3-5a3d0c33db27",
                            CreatedAt = new DateTime(2025, 9, 28, 19, 22, 0, 738, DateTimeKind.Utc).AddTicks(6156),
                            IsDeleted = false,
                            ResourceMethod = "POST",
                            ResourceName = "/api/users/assign-role",
                            ResourceType = "api",
                            UpdatedAt = new DateTime(2025, 9, 29, 0, 52, 0, 738, DateTimeKind.Local).AddTicks(6159)
                        },
                        new
                        {
                            Id = "e0341ccb-a538-4105-9256-4481e649c139",
                            CreatedAt = new DateTime(2025, 9, 28, 19, 22, 0, 738, DateTimeKind.Utc).AddTicks(6181),
                            IsDeleted = false,
                            ResourceMethod = "PUT",
                            ResourceName = "/api/users/special/update",
                            ResourceType = "api",
                            UpdatedAt = new DateTime(2025, 9, 29, 0, 52, 0, 738, DateTimeKind.Local).AddTicks(6182)
                        },
                        new
                        {
                            Id = "0380cc06-6937-40e2-b8bf-7d9a17eb127b",
                            CreatedAt = new DateTime(2025, 9, 28, 19, 22, 0, 738, DateTimeKind.Utc).AddTicks(6192),
                            IsDeleted = false,
                            ResourceMethod = "PUT",
                            ResourceName = "/api/users/update",
                            ResourceType = "api",
                            UpdatedAt = new DateTime(2025, 9, 29, 0, 52, 0, 738, DateTimeKind.Local).AddTicks(6193)
                        },
                        new
                        {
                            Id = "a2b89243-884a-4adb-92f1-102462bec90f",
                            CreatedAt = new DateTime(2025, 9, 28, 19, 22, 0, 738, DateTimeKind.Utc).AddTicks(6201),
                            IsDeleted = false,
                            ResourceMethod = "PUT",
                            ResourceName = "/api/users/update-role",
                            ResourceType = "api",
                            UpdatedAt = new DateTime(2025, 9, 29, 0, 52, 0, 738, DateTimeKind.Local).AddTicks(6202)
                        },
                        new
                        {
                            Id = "aa7bce7c-8d47-4f6d-bf24-4a22bfe15275",
                            CreatedAt = new DateTime(2025, 9, 28, 19, 22, 0, 738, DateTimeKind.Utc).AddTicks(6209),
                            IsDeleted = false,
                            ResourceMethod = "DELETE",
                            ResourceName = "/api/users/special/delete",
                            ResourceType = "api",
                            UpdatedAt = new DateTime(2025, 9, 29, 0, 52, 0, 738, DateTimeKind.Local).AddTicks(6209)
                        },
                        new
                        {
                            Id = "fdd1b674-7fee-415f-a945-d3469ed4f350",
                            CreatedAt = new DateTime(2025, 9, 28, 19, 22, 0, 738, DateTimeKind.Utc).AddTicks(6218),
                            IsDeleted = false,
                            ResourceMethod = "GET",
                            ResourceName = "/api/users/get",
                            ResourceType = "api",
                            UpdatedAt = new DateTime(2025, 9, 29, 0, 52, 0, 738, DateTimeKind.Local).AddTicks(6219)
                        });
                });

            modelBuilder.Entity("Domain.Entities.ResourcePermission", b =>
                {
                    b.Property<string>("ResourceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PermissionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ResourceId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ResourcePermissions");

                    b.HasData(
                        new
                        {
                            ResourceId = "933334fe-2277-448d-afd5-aacda49094e7",
                            PermissionId = "4d3f2168-56f0-432a-aabb-4ca7316af375"
                        },
                        new
                        {
                            ResourceId = "e0341ccb-a538-4105-9256-4481e649c139",
                            PermissionId = "4d3f2168-56f0-432a-aabb-4ca7316af375"
                        },
                        new
                        {
                            ResourceId = "806ae3a9-6d4b-44e2-beb3-5a3d0c33db27",
                            PermissionId = "ae9e8307-38b9-40fa-9f61-4ee258ecd8e5"
                        },
                        new
                        {
                            ResourceId = "a2b89243-884a-4adb-92f1-102462bec90f",
                            PermissionId = "ae9e8307-38b9-40fa-9f61-4ee258ecd8e5"
                        },
                        new
                        {
                            ResourceId = "e0341ccb-a538-4105-9256-4481e649c139",
                            PermissionId = "c1e6e530-0d73-4ee3-869b-5facc7d86953"
                        },
                        new
                        {
                            ResourceId = "a2b89243-884a-4adb-92f1-102462bec90f",
                            PermissionId = "ea9455a0-73e4-4d6c-8f4a-76ea306efa9f"
                        },
                        new
                        {
                            ResourceId = "aa7bce7c-8d47-4f6d-bf24-4a22bfe15275",
                            PermissionId = "069f8c1f-7957-49c8-8ef0-42f2aa318343"
                        },
                        new
                        {
                            ResourceId = "fdd1b674-7fee-415f-a945-d3469ed4f350",
                            PermissionId = "57d05878-10f8-4c77-a064-8c24159a1a74"
                        },
                        new
                        {
                            ResourceId = "0380cc06-6937-40e2-b8bf-7d9a17eb127b",
                            PermissionId = "57d05878-10f8-4c77-a064-8c24159a1a74"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "ae4094ef-d37d-40d8-b963-d267daaaf997",
                            CreatedAt = new DateTime(2025, 9, 28, 19, 22, 0, 733, DateTimeKind.Utc).AddTicks(9850),
                            IsDeleted = false,
                            Name = "Admin",
                            UpdatedAt = new DateTime(2025, 9, 29, 0, 52, 0, 733, DateTimeKind.Local).AddTicks(9948)
                        },
                        new
                        {
                            Id = "d5b4010a-1235-45f2-893a-ac49f1a8bb43",
                            CreatedAt = new DateTime(2025, 9, 28, 19, 22, 0, 737, DateTimeKind.Utc).AddTicks(1758),
                            IsDeleted = false,
                            Name = "User",
                            UpdatedAt = new DateTime(2025, 9, 29, 0, 52, 0, 737, DateTimeKind.Local).AddTicks(1763)
                        },
                        new
                        {
                            Id = "f83eb35d-fea7-4ce3-b771-b0abbbfce1d8",
                            CreatedAt = new DateTime(2025, 9, 28, 19, 22, 0, 737, DateTimeKind.Utc).AddTicks(1797),
                            IsDeleted = false,
                            Name = "Manager",
                            UpdatedAt = new DateTime(2025, 9, 29, 0, 52, 0, 737, DateTimeKind.Local).AddTicks(1797)
                        });
                });

            modelBuilder.Entity("Domain.Entities.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PermissionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = "ae4094ef-d37d-40d8-b963-d267daaaf997",
                            PermissionId = "4d3f2168-56f0-432a-aabb-4ca7316af375"
                        },
                        new
                        {
                            RoleId = "ae4094ef-d37d-40d8-b963-d267daaaf997",
                            PermissionId = "ae9e8307-38b9-40fa-9f61-4ee258ecd8e5"
                        },
                        new
                        {
                            RoleId = "ae4094ef-d37d-40d8-b963-d267daaaf997",
                            PermissionId = "c1e6e530-0d73-4ee3-869b-5facc7d86953"
                        },
                        new
                        {
                            RoleId = "ae4094ef-d37d-40d8-b963-d267daaaf997",
                            PermissionId = "ea9455a0-73e4-4d6c-8f4a-76ea306efa9f"
                        },
                        new
                        {
                            RoleId = "ae4094ef-d37d-40d8-b963-d267daaaf997",
                            PermissionId = "069f8c1f-7957-49c8-8ef0-42f2aa318343"
                        },
                        new
                        {
                            RoleId = "ae4094ef-d37d-40d8-b963-d267daaaf997",
                            PermissionId = "57d05878-10f8-4c77-a064-8c24159a1a74"
                        },
                        new
                        {
                            RoleId = "d5b4010a-1235-45f2-893a-ac49f1a8bb43",
                            PermissionId = "57d05878-10f8-4c77-a064-8c24159a1a74"
                        },
                        new
                        {
                            RoleId = "f83eb35d-fea7-4ce3-b771-b0abbbfce1d8",
                            PermissionId = "57d05878-10f8-4c77-a064-8c24159a1a74"
                        },
                        new
                        {
                            RoleId = "f83eb35d-fea7-4ce3-b771-b0abbbfce1d8",
                            PermissionId = "c1e6e530-0d73-4ee3-869b-5facc7d86953"
                        },
                        new
                        {
                            RoleId = "f83eb35d-fea7-4ce3-b771-b0abbbfce1d8",
                            PermissionId = "ea9455a0-73e4-4d6c-8f4a-76ea306efa9f"
                        },
                        new
                        {
                            RoleId = "f83eb35d-fea7-4ce3-b771-b0abbbfce1d8",
                            PermissionId = "ae9e8307-38b9-40fa-9f61-4ee258ecd8e5"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SigningKey", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Kid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateKeyEncrypted")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicKeyPem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RetiredAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SigningKey");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Resource", b =>
                {
                    b.HasOne("Domain.Entities.Resource", "ParentResource")
                        .WithMany("ChildResources")
                        .HasForeignKey("ParentResourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentResource");
                });

            modelBuilder.Entity("Domain.Entities.ResourcePermission", b =>
                {
                    b.HasOne("Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Resource", "Resource")
                        .WithMany("ResourcePermissions")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Resource", b =>
                {
                    b.Navigation("ChildResources");

                    b.Navigation("ResourcePermissions");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
